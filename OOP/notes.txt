Classes and Objects:

Python is an object oriented programming language.
Almost everything in Python is an object, with its properties and methods.
A Class is like an object constructor, or a "blueprint" for creating objects.


The __init__() Function:
To understand the meaning of classes we have to understand the built-in __init__() function.
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations that are 
necessary to do when the object is being created


Objects can also contain methods. 
Methods in objects are functions that belong to the object.
Note: The self parameter is a reference to the current instance of the class, 
and is used to access variables that belong to the class.
It does not have to be named self, you can call it whatever you like, 
but it has to be the first parameter of any function in the class

You can modify or delete properties of objects

You can also delte objects using "del" function

class definitions cannot be empty, but if you for some reason have a class definition 
with no content, put in the pass statement to avoid getting an error.



Inheritance:

Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.
Child class is the class that inherits from another class, also called derived class.

Note: The __init__() function is called automatically every time the class is being used to create a new object.

When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.
Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.

If you add a method in the child class with the same name as a function in the parent class, 
the inheritance of the parent method will be overridden.